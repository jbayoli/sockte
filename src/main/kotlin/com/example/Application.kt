package com.example

import io.ktor.network.selector.*
import io.ktor.network.sockets.*
import io.ktor.utils.io.*
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import java.net.InetSocketAddress

fun main() {
    runBlocking {
        val server = aSocket(ActorSelectorManager(Dispatchers.IO)).tcp().bind(InetSocketAddress("192.168.195.210", 8080))
        println("Started echo telnet server at ${server.localAddress}")

        while (true) {
            val socket = server.accept()
            val dataByteArray = ByteArray(50)
            var count = 1

            launch {
                println("Socket accepted: ${socket.remoteAddress}")

                val input = socket.openReadChannel()
                val output = socket.openWriteChannel(autoFlush = true)
                val data = when (count) {
                    1 -> "000C603535201508102020010002A00015970001000000000230303030303030383033434153482032204B494E53414E47414E492020202020202020425554412020202020202020202020017353303143413033343437463031314730343030303059313934343030303030303034313131313130313130443033342020543030593139FFFFFFFFFFFFFFFFFFFFFFFF46464646464646593139FFFFFFFFFFFFFFFFFFFFFFFF4646464646464648303133493034303030324F31303231303630323131323750313820202020202020202020202020202020202051303836303130202020205231382020202020202020202031383020202020200008303034533132314058EE9CB60E18E03968FC"
                    2 -> "007B603535201508102020010002800005970001000000000230303030303030383033007830373448303141321920200020276131192020002027613119202000202761311920200020276131403032543219202000202761311920200020276131192020002027613119202000202761314073ED96042995AE8169C5"
                    3 -> "006B60353520150810202001000280000597000100000000023030303030303038303300623035385031383430353030202020202020202020313030202020202020202020403239353036303020202020202020202032303020202020202020202040AB585BCB8DD36DBF2C4A"

                    5 -> "005A603535201508102020010002800005970001000000000230303030303030383033004530343146353238352A2A2A2A2A4931313642494E204249432020202020202020202020203343313130313032408936390FF72E95D0F933"
                    6 -> "005F6035352015081020200100028000059700010000000002303030303030303830330050303436453136303030303030303030303030303030316030303031000131303935303020202020202020202020203130313004A65278926A9A48389B"
                    else -> "004260353520150810202001000280000597000000000000023030303030303038303300213031374B00000000000100000006061111221111118C2DF6651F9DCAC1BAF6"
                }

                try {
                    input.readFully(dataByteArray)
                    println("${socket.remoteAddress}, data: ${dataByteArray.joinToString("") { String.format("%02X", (it.toInt() and 0xFF)) }}")
                    output.writeFully(data.hex2bin())
                    count++
                    println(count)
                } catch (e: Throwable) {
                    e.printStackTrace()
                    socket.close()
                }
            }
        }
    }
}

fun String.hex2bin(): ByteArray {
    return chunked(2).map { it.toInt(16).toByte() }.toByteArray()
}